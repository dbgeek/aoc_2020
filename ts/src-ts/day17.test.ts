import { day17Part1, day17Part2, doSimulatePart1, getActiveNodes, getNeighborsPart1 } from './day17';

describe('day17', () => {
  test('getNeighborsPart1', () => {
    expect(getNeighborsPart1('0,0,0')).toStrictEqual(
      new Set([
        '-1,-1,-1',
        '-1,-1,0',
        '-1,-1,1',
        '-1,0,-1',
        '-1,0,0',
        '-1,0,1',
        '-1,1,-1',
        '-1,1,0',
        '-1,1,1',
        '0,-1,-1',
        '0,-1,0',
        '0,-1,1',
        '0,0,-1',
        '0,0,1',
        '0,1,-1',
        '0,1,0',
        '0,1,1',
        '1,-1,-1',
        '1,-1,0',
        '1,-1,1',
        '1,0,-1',
        '1,0,0',
        '1,0,1',
        '1,1,-1',
        '1,1,0',
        '1,1,1',
      ]),
    );
  });
  test('getActiveNodes', () => {
    expect(
      getActiveNodes([
        ['.', '#', '.'],
        ['.', '.', '#'],
        ['#', '#', '#'],
      ]),
    ).toStrictEqual(new Set(['1,0,0', '2,1,0', '0,2,0', '1,2,0', '2,2,0']));
  });
  test('doSimulate', () => {
    expect(doSimulatePart1(new Set(['1,0,0', '2,1,0', '0,2,0', '1,2,0', '2,2,0']))).toEqual(
      new Set(['0,1,0', '1,2,0', '2,1,0', '2,2,0', '2,2,-1', '0,1,-1', '0,1,1', '2,2,1', '1,3,-1', '1,3,1', '1,3,0']),
    );
  });
  test('day17Part1', () => {
    expect(
      day17Part1([
        ['.', '#', '.'],
        ['.', '.', '#'],
        ['#', '#', '#'],
      ]),
    ).toEqual(112);
  });
  test('day17Part2', () => {
    expect(
      day17Part2([
        ['.', '.', '.', '.', '.', '.', '#', '#'],
        ['#', '#', '#', '#', '.', '#', '.', '.'],
        ['.', '#', '#', '.', '.', '.', '.', '#'],
        ['.', '#', '#', '.', '#', '.', '.', '#'],
        ['.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '#', '.', '#', '.', '#', '#', '#'],
        ['#', '.', '#', '#', '.', '.', '.', '.'],
        ['#', '#', '#', '#', '.', '#', '.', '.'],
      ]),
    ).toEqual(1892);
  });
});
